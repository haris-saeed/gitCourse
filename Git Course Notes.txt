
*******************Theory******************

(https://www.geeksforgeeks.org/version-control-systems/)

What is a “version control system”? 
Version control systems are a category of software tools that helps in recording changes made to files by keeping a track of modifications done in the code. 

Types of Version Control Systems: 

    Local Version Control Systems
    Centralized Version Control Systems
    Distributed Version Control Systems
	
	1. Local Version Control Systems: It is one of the simplest forms and has a database that kept all the changes to files under revision control. 

	2.Centralized Version Control Systems: Centralized version control systems contain just one repository globally and every user need to commit for reflecting one’s changes in the repository. It is possible for others to see your changes by updating. 

	3. Distributed Version Control Systems: Distributed version control systems contain multiple repositories. Each user has their own repository and working copy.
	
	Distributed Version control system means every collaborator(any developer working on a team project)has a local repository of the project in his/her local machine unlike central where team members should have an internet connection to every time update their work to the main central repository. 

	So, by distributed we mean: the project is distributed. A repository is an area that keeps all your project files, images, etc. In terms of Github: different versions of projects correspond to commits.
	
	
	
***************************Practical***************************	

Must Read: https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository





Course: Git  - March 6, 2023 Monday 
Duration: 2 Hrs

Git commands in "DataEng Notes - NuqtaSol GDrive" folder


1) Create an empty Git repository or reinitialize an existing one
	$ git init
	
	$git status


2) Adding files to stage 
	$ git add <file-name>
	
	To add all file 
		$git add .
	
	
3) git config
	$ git config user.email "harisazfar35@gmail.com"
	$ git config user.name "haris-saeed"


4) git commit
	$ git commit -m "a msg for your commit"
	
	to overcome running add & commit command separately again & again do this:
		$ git commit -am "comit msg"   => this would add as well as commit
		


5) Add remote repo (link you local repo to the one on cloud)
	$ git remote add origin <repo cloning URL>
	git remote add origin https://github.com/haris-saeed/test2.git
	
	
	To Verify if we have push & pull access on a particular cloud-repo
		$git remote -v


6) To push your staged files to remote repository 
	$git push origin -u master					Q: what does "-u" flag does???
	
	Choose name of branch while pushing
	$git push origin <branch-name>            


	To push the current branch and set the remote as upstream:
		$git push --set-upstream origin feature
	
	To unset upstream branch:
		$git branch --unset-upstream



	$git status
	$git status -s
	
	
	=>To see what you’ve changed but not yet staged, type git diff with no other arguments
	
	=> If you want to see what you’ve staged that will go into your next commit, you can use git diff --staged. This command compares your staged changes to your last commit
	
	
7) git rm
		$git rm <filename>
	
	To keep the file in your working tree but remove it from your staging area. This is particularly useful if you forgot to add something to your .gitignore file and accidentally staged it
		$git rm --cached <filenmae>
		
		
		//changes made for signup-styles
	
8) Moving Files (Renaming)
	If you want to rename a file in Git, you can run something like:
		$git mv file_from file_to
	
9) Branching
	To create a branch:
		$git branch <branch-name>  
		
	To see all the remote & local branches
		$git branch -a
	
	$git branch --list
	
	to switch branch:
		$git checkout <branch-name>
		
	to directly create & swicth to branch
		$ git checkout -b <branch-name-to-create>
		
	To delete a branch:
		$ git branch -D <branch-name>
		
		
	To delete a branch from remote as well:
		1st delte branch locally then:
		$ git push origin --delete <branch-name>
		
		
10) Cloning a repo
	$git clone <repo URL>
	
	$git branch -a
	$git branch checkout <branch-of-your-choice>
		
		
		
10) git diff 
	-> to see the actual difference between 2 files
		
	
9) Pull Request via Github  (Merging branch)
 we can merge branches within a repository by creating pull request in Github - check for conflicts if no conflict then they could be merged & "pull request" will closed. After that we can delete that branch which we just merged from remote as well as local repo.
 
	$git merge <branch-name>
 
===================================================================
		Copied from git console

$ git commit -m "modeified Git Course Notes txt file"
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   Git Course Notes.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Git Course Notes.txt.bak
        Practical-Git/

no changes added to commit (use "git add" and/or "git commit -a")






Haris@LAPTOP-FRV6TNCQ MINGW64 /d/Work/CloudStorage/Google/account_harisazfar35@gmail.com/Google Drive/STUDY/COURSES/Technologies, Tools & Concepts/DevOps/Version Control - Git (one)
$ git checkout master
error: Your local changes to the following files would be overwritten by checkout:
        Git Course Notes.txt
Please commit your changes or stash them before you switch branches.
Aborting

===================================================================

The Three States in Git
	.Modified:  means that you have changed the file but have not committed it to your database yet
	.Staged:  means that you have marked a modified file in its current version to go into your next commit snapshot
	.Commited: means that the data is safely stored in your local database.
	
	

 . squashing commit
 . rebasing